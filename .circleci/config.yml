version: 2.1
jobs:
  build:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - run:
          name: Calculate cache key
          command: |-
            find . -name 'pom.xml' -o -name 'gradlew*' -o -name '*.gradle*' | \
                    sort | xargs cat > /tmp/CIRCLECI_CACHE_KEY
      - restore_cache:
          key: cache-{{ checksum "/tmp/CIRCLECI_CACHE_KEY" }}
      - run:
          command: ./gradlew build -x test -x spotbugsMain
      - save_cache:
          key: cache-{{ checksum "/tmp/CIRCLECI_CACHE_KEY" }}
          paths:
            - ~/.gradle/caches
  test:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - run:
          name: Calculate cache key
          command: |-
            find . -name 'pom.xml' -o -name 'gradlew*' -o -name '*.gradle*' | \
                    sort | xargs cat > /tmp/CIRCLECI_CACHE_KEY
      - restore_cache:
          key: cache-{{ checksum "/tmp/CIRCLECI_CACHE_KEY" }}
      - run:
          command: ./gradlew test
      - store_test_results:
          path: telemed/build/test-results
      - store_artifacts:
          path: telemed/build/reports
  static-analysis:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - run:
          name: Calculate cache key
          command: |-
            find . -name 'pom.xml' -o -name 'gradlew*' -o -name '*.gradle*' | \
                    sort | xargs cat > /tmp/CIRCLECI_CACHE_KEY
      - restore_cache:
          key: cache-{{ checksum "/tmp/CIRCLECI_CACHE_KEY" }}
      - run:
          command: ./gradlew spotbugsMain
      - store_artifacts:
          path: telemed/build/reports
  docker-build:
    docker:
      - image: cimg/base:2024.05
    steps:
      - checkout
      - run:
          name: Calculate cache key
          command: |-
            find . -name 'pom.xml' -o -name 'gradlew*' -o -name '*.gradle*' | \
                    sort | xargs cat > /tmp/CIRCLECI_CACHE_KEY
      - restore_cache:
          key: cache-{{ checksum "/tmp/CIRCLECI_CACHE_KEY" }}
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Docker Build
          command: docker build -t christianmaintz/telemed:circleci-latest -t christianmaintz/telemed:circleci-<< pipeline.number >> .
      - run:
          name: Docker Push
          command: |
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
            docker push christianmaintz/telemed:circleci-latest
            docker push christianmaintz/telemed:circleci-<< pipeline.number >>
  deploy-test:
    docker:
      - image: cimg/base:stable
    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:veTtJI1yzckbv/Uc6ZdZKIIQzFm533S6vAXEyxEe4+k"
      - run:
          name: Add SSH host to known
          command: ssh-keyscan -H $SSH_HOST_TEST >> ~/.ssh/known_hosts
      - run:
          name: Deploy to Test
          command: |
            ssh $SSH_USER_TEST@$SSH_HOST_TEST "
            docker pull christianmaintz/telemed:circleci-<< pipeline.number >>
            docker stop telemed-test || true
            docker rm telemed-test || true
            docker run -d -p 7777:7777 --name telemed-test christianmaintz/telemed:circleci-<< pipeline.number >>
            "
  deploy-prod:
    docker:
      - image: cimg/base:stable
    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:veTtJI1yzckbv/Uc6ZdZKIIQzFm533S6vAXEyxEe4+k"
      - run:
          name: Add SSH host to known
          command: ssh-keyscan -H $SSH_HOST_PROD >> ~/.ssh/known_hosts
      - run:
          name: Deploy to Prod
          command: |
            ssh $SSH_USER_PROD@$SSH_HOST_PROD "
            docker pull christianmaintz/telemed:circleci-<< pipeline.number >>
            docker stop telemed-prod || true
            docker rm telemed-prod || true
            docker run -d -p 7777:7777 --name telemed-prod christianmaintz/telemed:circleci-<< pipeline.number >>
            "
workflows:
  pipeline:
    jobs:
      - build
      - test:
          requires:
            - build
      - static-analysis:
          requires:
            - test
      - docker-build:
          requires:
            - static-analysis
          filters:
            branches:
              only: main
      - deploy-test:
          requires:
            - docker-build
          filters:
            branches:
              only: main
      - manual-approval:
          type: approval
          requires:
            - deploy-test
          filters:
            branches:
              only: main
      - deploy-prod:
          requires:
            - manual-approval
          filters:
            branches:
              only: main




